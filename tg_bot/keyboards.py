import json

from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from cashews import cache

from functions import *
from config import *

#################################################################################################################################
async def kb_construct(keyboard = None, q = {}, row_width = 2):
	if not keyboard: keyboard = InlineKeyboardMarkup(row_width)
	if type(q) is dict:
		for x in q:
			_ = q[x].split('^')
			if _[0] == 'url': keyboard.insert(InlineKeyboardButton(x,url=_[1]))

			elif _[0] == 'cd': keyboard.insert(InlineKeyboardButton(x,callback_data=_[1]))
	else:
		for x in q: keyboard.insert(x)

	return keyboard
#################################################################################################################################
cache.setup("mem://")



async def kb_menu(uid):
	s = {'–ü—Ä–æ–µ–∫—Ç—ã': 'cd^project:menu', '–ö–ª—é—á–∏': 'cd^license_key:menu'}
	keyboard = await kb_construct(InlineKeyboardMarkup(row_width=2), s)
	return keyboard


async def kb_project_menu():
	s = {'–°–æ–∑–¥–∞—Ç—å': 'cd^project:create', '–ù–∞–π—Ç–∏': 'cd^project:search', '‚Ü™ –ù–∞–∑–∞–¥': 'cd^utils:menu'}
	keyboard = await kb_construct(InlineKeyboardMarkup(row_width=2), s)
	return keyboard

async def kb_project_manage(project):
	s = {'‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å': f'cd^project:{project["id"]}:change:name', '–£–¥–∞–ª–∏—Ç—å': f'cd^project:{project["id"]}:delete', '‚Ü™ –ù–∞–∑–∞–¥': 'cd^utils:menu'}
	keyboard = await kb_construct(InlineKeyboardMarkup(row_width=2), s)
	return keyboard

async def kb_project_create(state: str = None, files_to_encrypt: dict = {}):
	print(state)
	if state == 'name':
		s = {'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π': 'cd^project:create:random', '‚Ü™ –ù–∞–∑–∞–¥':'cd^project:menu'}
	elif state == 'archive':
		s = {'‚Ü™ –ù–∞–∑–∞–¥':'cd^project:menu'}
	elif state == 'choose_files':
		s = {**{f'{x} - {files_to_encrypt[x]}': f'cd^{x}' for x in files_to_encrypt}, 'üíé –ó–∞–∫—Ä–∏–ø—Ç–æ–≤–∞—Ç—å': 'cd^__encrypt__:__encrypt__'}
	else:
		s = {}
	keyboard = await kb_construct(InlineKeyboardMarkup(row_width=2), s)
	return keyboard



### UTILS ###
async def kb_close():
	keyboard = await kb_construct(InlineKeyboardMarkup(), {'‚ùå –ó–∞–∫—Ä—ã—Ç—å':'cd^utils:delete'})
	return keyboard

async def kb_back(callback_data = 'user:menu', text = '‚Ü™ –ù–∞–∑–∞–¥'):
	keyboard = InlineKeyboardMarkup()
	keyboard.add(InlineKeyboardButton(text, callback_data=callback_data))
	return keyboard